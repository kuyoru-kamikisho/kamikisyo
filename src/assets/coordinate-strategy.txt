00   01   02   03   04   05   06   07   08   09   010
10   11   12   13   14   15   16   17   18   19   110
20   21   22   23   24   25   26   27   28   29   210
30   31   32   33   34   35   36   37   38   39   310
40   41   42   43   44   45   46   47   48   49   410
50   51   52   53   54   55   56   57   58   59   510
60   61   62   63   64   65   66   67   68   69   610
70   71   72   73   74   75   76   77   78   79   710
80   81   82   83   84   85   86   87   88   89   810
90   91   92   93   94   95   96   97   98   99   910
100   101   102   103   104   105   106   107   108   109   1010
110   111   112   113   114   115   116   117   118   119   1110
120   121   122   123   124   125   126   127   128   129   1210
130   131   132   133   134   135   136   137   138   139   1310
140   141   142   143   144   145   146   147   148   149   1410
150   151   152   153   154   155   156   157   158   159   1510
160   161   162   163   164   165   166   167   168   169   1610
170   171   172   173   174   175   176   177   178   179   1710
180   181   182   183   184   185   186   187   188   189   1810
190   191   192   193   194   195   196   197   198   199   1910

----------------------------- parseMatrix ------------------------------------
观察上面的数字矩阵，
数组：['00','1910'] 就代表上面的矩阵，解析这样的数组并返回对应的矩阵数组

举例：
接受的参数：
['40','51']
返回值：
['40','41','50','51']

-------------------------------------------------------------------------------
let str = ''
for (let j = 0; j < rn; j++) {
  for (let k = 0; k < cn; k++) {
    // 从第一个开始尝试占用
    str += j + '' + k+'   '
  }
  str+='\n'
}

log(str)
--------------------------------getSubMatrix------------------------------------
接受四个参数：
2,2,3,2
四个参数分别代表左侧偏移的格子数，顶部偏移的格子数，矩形的长度占据的格子数，矩形的高度占据的格子数

所以应该返回一个包含如下元素的数组：
22   23   24
32   33   34